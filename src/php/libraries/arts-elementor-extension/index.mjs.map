{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@arts+utilities@file+..+ArtsUtilities_aeb58f64b3d32c916b3ea371a7fa3797/node_modules/@arts/utilities/src/ts/core/events/Debounce.ts", "../../../js/editor/LiveSettings.js", "../../../js/index.js"],
  "sourcesContent": ["import type { IDebounce } from '../interfaces'\n\n/**\n * Creates a debounced function that delays execution until after a specified wait period\n * has elapsed since the last invocation. This is essential for performance optimization\n * when dealing with high-frequency events like scrolling, resizing, or typing.\n *\n * The debounced function will:\n * - Cancel any pending execution when called again within the wait period\n * - Preserve the original function's context (this) and arguments\n * - Execute only after the wait period has elapsed without new calls\n * - Return the same type as the original function\n *\n * @param fn - The function to debounce (any function with any arguments)\n * @param wait - The delay in milliseconds before the function executes\n * @returns A debounced version of the input function with identical signature\n *\n * @example\n * ```typescript\n * // Example 1: Debounce resize handler for performance\n * const handleResize = () => {\n *   console.log('Window resized!');\n *   recalculateLayout();\n * };\n *\n * const debouncedResize = debounce(handleResize, 250);\n * window.addEventListener('resize', debouncedResize);\n * // handleResize will only execute 250ms after the last resize event\n *\n * // Example 2: Debounce search input for API efficiency\n * const searchUsers = async (query: string) => {\n *   const response = await fetch(`/api/search?q=${query}`);\n *   return response.json();\n * };\n *\n * const debouncedSearch = debounce(searchUsers, 300);\n *\n * // In an input handler:\n * input.addEventListener('input', (e) => {\n *   debouncedSearch(e.target.value);\n * });\n * // API call only happens 300ms after user stops typing\n *\n * // Example 3: Debounce expensive calculations\n * const calculateComplexData = (data: number[]) => {\n *   // Expensive operation\n *   return data.reduce((sum, val) => sum + Math.sqrt(val), 0);\n * };\n *\n * const debouncedCalculation = debounce(calculateComplexData, 100);\n *\n * // Rapid calls will be batched\n * debouncedCalculation([1, 2, 3]); // Cancelled\n * debouncedCalculation([4, 5, 6]); // Cancelled\n * debouncedCalculation([7, 8, 9]); // Executes after 100ms\n *\n * // Example 4: Debounce with preserved context\n * class DataProcessor {\n *   private data: any[] = [];\n *\n *   processData(newData: any[]) {\n *     this.data = [...this.data, ...newData];\n *     console.log('Processing', this.data.length, 'items');\n *   }\n *\n *   constructor() {\n *     // Context (this) is preserved in debounced method\n *     this.debouncedProcess = debounce(this.processData.bind(this), 500);\n *   }\n *\n *   debouncedProcess: (data: any[]) => void;\n * }\n * ```\n */\nexport const debounce: IDebounce = <T extends (...args: any[]) => any>(fn: T, wait: number): T => {\n  let timeout: number | undefined\n\n  const debounced = function (this: any, ...args: any[]) {\n    clearTimeout(timeout)\n    timeout = window.setTimeout(() => fn.apply(this, args), wait)\n  } as unknown as T\n\n  return debounced\n}\n", "import { debounce } from '@arts/utilities'\n\n/**\n * Elementor Editor Live Settings\n * Handles live settings changes in the Elementor editor\n */\n\n/**\n * LiveSettings class for handling Elementor editor settings changes\n */\nclass LiveSettings {\n  /**\n   * Creates an instance of LiveSettings\n   */\n  constructor() {\n    this.elementorInstance = null\n    this.previewWindow = null\n    this.resizeObserver = null\n    this.debouncedResizeEmit = null\n  }\n\n  /**\n   * Initializes the live settings module\n   * @param {Object} elementor - The Elementor object\n   * @returns {Object} - Public API methods\n   */\n  init(elementor) {\n    this.elementorInstance = elementor\n\n    // Initialize when preview is loaded\n    this.elementorInstance.once('preview:loaded', () => {\n      this.setWindow()\n      this.addSettingsChangeCallbacks()\n      this.addReloadPreviewListener()\n    })\n\n    // Return public API\n    return {\n      updatePreview: this.updatePreview.bind(this),\n      reloadPreview: this.reloadPreview.bind(this),\n      emitEvent: this.emitEvent.bind(this),\n      disconnect: this.disconnect.bind(this)\n    }\n  }\n\n  /**\n   * Sets the preview window reference\n   * @private\n   */\n  setWindow() {\n    this.previewWindow = this.elementorInstance.$preview.get(0).contentWindow\n    this.initResizeObserver()\n  }\n\n  /**\n   * Initializes the ResizeObserver to watch for preview window size changes\n   * @private\n   */\n  initResizeObserver() {\n    if (!this.previewWindow) return\n\n    // Create debounced function for resize events\n    this.debouncedResizeEmit = debounce((entries) => {\n      const entry = entries[0]\n      if (entry) {\n        const { width, height } = entry.contentRect\n        this.emitEvent('arts/elementor_extension/editor/preview_resized', {\n          width,\n          height,\n          contentRect: entry.contentRect\n        })\n      }\n    }, 300)\n\n    // Create ResizeObserver\n    this.resizeObserver = new ResizeObserver(this.debouncedResizeEmit)\n\n    // Observe the preview window's document body\n    if (this.previewWindow.document && this.previewWindow.document.body) {\n      this.resizeObserver.observe(this.previewWindow.document.body)\n    }\n\n    const elementorPreview = document.getElementById('elementor-preview')\n\n    if (elementorPreview) {\n      this.resizeObserver.observe(elementorPreview)\n    }\n  }\n\n  /**\n   * Disconnects the ResizeObserver\n   * @private\n   */\n  disconnectResizeObserver() {\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect()\n      this.resizeObserver = null\n    }\n    this.debouncedResizeEmit = null\n  }\n\n  /**\n   * Sets up callbacks for settings changes\n   * @private\n   */\n  addSettingsChangeCallbacks() {\n    const { addChangeCallback } = this.elementorInstance.settings.page\n\n    // Get settings from the global variable or use empty array as fallback\n    // This variable should be localized by WordPress\n    const tabsControls = window.artsElementorExtensionEditorLiveSettings || []\n\n    // Bind the method to this instance\n    tabsControls.forEach((setting) =>\n      addChangeCallback(setting, (value) => this.onSettingChange(setting, value))\n    )\n  }\n\n  /**\n   * Handles setting change events\n   * @param {string} setting - The setting that changed\n   * @param {*} value - The new value\n   * @private\n   */\n  onSettingChange(setting, value) {\n    const settings = this.elementorInstance.settings.page.model.attributes\n\n    this.emitEvent('arts/elementor_extension/editor/setting_changed', {\n      settings,\n      setting,\n      value\n    })\n  }\n\n  /**\n   * Adds event listener for reload preview event\n   * @private\n   */\n  addReloadPreviewListener() {\n    if (this.previewWindow) {\n      this.previewWindow.removeEventListener(\n        'arts/elementor_extension/editor/reload_preview',\n        this.onReloadPreview.bind(this)\n      )\n      this.previewWindow.addEventListener(\n        'arts/elementor_extension/editor/reload_preview',\n        this.onReloadPreview.bind(this)\n      )\n    }\n  }\n\n  /**\n   * Handles reload preview event\n   * @param {CustomEvent} event - The event object\n   * @private\n   */\n  onReloadPreview(event) {\n    // Check if event.detail exists\n    const detail = event.detail || {}\n\n    // Extract route and section with default values (undefined)\n    const { route, section } = detail\n\n    // Pass to reloadPreview - the function already has proper handling for undefined values\n    this.reloadPreview(route, section)\n  }\n\n  /**\n   * Updates the preview\n   * @param {string} route - The route to navigate to\n   * @param {string} section - The section to activate\n   * @public\n   */\n  updatePreview(route, section) {\n    this.elementorInstance.once('preview:loaded', () => {\n      window.$e.data.get('globals/index').then(() => {\n        setTimeout(() => {\n          if (window.$e.routes.current.panel.search('panel/global') >= 0) {\n            window.$e.run('panel/global/open').then(() => {\n              if (route) {\n                window.$e.route(route)\n              }\n\n              window.elementorCommon.elements.$body.removeClass('elementor-panel-loading')\n            })\n          } else {\n            if (route) {\n              window.$e.route(route)\n            }\n\n            if (section) {\n              this.elementorInstance.getPanelView().getCurrentPageView().activateSection(section)\n              this.elementorInstance.getPanelView().getCurrentPageView().openActiveSection()\n              this.elementorInstance.getPanelView().getCurrentPageView().render()\n            }\n\n            window.elementorCommon.elements.$body.removeClass('elementor-panel-loading')\n          }\n        }, 500)\n      })\n    })\n\n    window.$e.run('preview/reload')\n  }\n\n  /**\n   * Reloads the preview\n   * @param {string} route - The route to navigate to after reload\n   * @param {string} section - The section to activate after reload\n   * @public\n   */\n  reloadPreview(route, section) {\n    window.elementorCommon.elements.$body.addClass('elementor-panel-loading')\n    window.$e.run('document/save/update').then(() => {\n      this.updatePreview(route, section)\n    })\n  }\n\n  /**\n   * Emits an event to the preview window\n   * @param {string} eventName - The name of the event\n   * @param {Object} data - The data to send with the event\n   * @public\n   */\n  emitEvent(eventName, data) {\n    if (this.previewWindow) {\n      const event = new CustomEvent(eventName, {\n        detail: data\n      })\n\n      this.previewWindow.dispatchEvent(event)\n    }\n  }\n\n  /**\n   * Disconnects all observers and cleans up resources\n   * @public\n   */\n  disconnect() {\n    this.disconnectResizeObserver()\n  }\n}\n\n// Create and export a singleton instance\nexport default {\n  init: (elementor) => new LiveSettings().init(elementor)\n}\n", "import LiveSettings from './editor/LiveSettings.js'\n\nwindow.addEventListener('elementor/init', () => {\n  // Initialize the LiveSettings with the elementor instance\n  LiveSettings.init(window.elementor)\n})\n"],
  "mappings": ";AA0Ea,IAAA,WAAsB,CAAoC,IAAO,SAAoB;AAC5F,MAAA;AAEE,QAAA,YAAY,YAAwB,MAAa;AACrD,iBAAa,OAAO;AACV,cAAA,OAAO,WAAW,MAAM,GAAG,MAAM,MAAM,IAAI,GAAG,IAAI;EAC9D;AAEO,SAAA;AACT;;;ACzEA,IAAM,eAAN,MAAmB;AAAA;AAAA;AAAA;AAAA,EAIjB,cAAc;AACZ,SAAK,oBAAoB;AACzB,SAAK,gBAAgB;AACrB,SAAK,iBAAiB;AACtB,SAAK,sBAAsB;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,KAAK,WAAW;AACd,SAAK,oBAAoB;AAGzB,SAAK,kBAAkB,KAAK,kBAAkB,MAAM;AAClD,WAAK,UAAU;AACf,WAAK,2BAA2B;AAChC,WAAK,yBAAyB;AAAA,IAChC,CAAC;AAGD,WAAO;AAAA,MACL,eAAe,KAAK,cAAc,KAAK,IAAI;AAAA,MAC3C,eAAe,KAAK,cAAc,KAAK,IAAI;AAAA,MAC3C,WAAW,KAAK,UAAU,KAAK,IAAI;AAAA,MACnC,YAAY,KAAK,WAAW,KAAK,IAAI;AAAA,IACvC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY;AACV,SAAK,gBAAgB,KAAK,kBAAkB,SAAS,IAAI,CAAC,EAAE;AAC5D,SAAK,mBAAmB;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,qBAAqB;AACnB,QAAI,CAAC,KAAK,cAAe;AAGzB,SAAK,sBAAsB,SAAS,CAAC,YAAY;AAC/C,YAAM,QAAQ,QAAQ,CAAC;AACvB,UAAI,OAAO;AACT,cAAM,EAAE,OAAO,OAAO,IAAI,MAAM;AAChC,aAAK,UAAU,mDAAmD;AAAA,UAChE;AAAA,UACA;AAAA,UACA,aAAa,MAAM;AAAA,QACrB,CAAC;AAAA,MACH;AAAA,IACF,GAAG,GAAG;AAGN,SAAK,iBAAiB,IAAI,eAAe,KAAK,mBAAmB;AAGjE,QAAI,KAAK,cAAc,YAAY,KAAK,cAAc,SAAS,MAAM;AACnE,WAAK,eAAe,QAAQ,KAAK,cAAc,SAAS,IAAI;AAAA,IAC9D;AAEA,UAAM,mBAAmB,SAAS,eAAe,mBAAmB;AAEpE,QAAI,kBAAkB;AACpB,WAAK,eAAe,QAAQ,gBAAgB;AAAA,IAC9C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,2BAA2B;AACzB,QAAI,KAAK,gBAAgB;AACvB,WAAK,eAAe,WAAW;AAC/B,WAAK,iBAAiB;AAAA,IACxB;AACA,SAAK,sBAAsB;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,6BAA6B;AAC3B,UAAM,EAAE,kBAAkB,IAAI,KAAK,kBAAkB,SAAS;AAI9D,UAAM,eAAe,OAAO,4CAA4C,CAAC;AAGzE,iBAAa;AAAA,MAAQ,CAAC,YACpB,kBAAkB,SAAS,CAAC,UAAU,KAAK,gBAAgB,SAAS,KAAK,CAAC;AAAA,IAC5E;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB,SAAS,OAAO;AAC9B,UAAM,WAAW,KAAK,kBAAkB,SAAS,KAAK,MAAM;AAE5D,SAAK,UAAU,mDAAmD;AAAA,MAChE;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,2BAA2B;AACzB,QAAI,KAAK,eAAe;AACtB,WAAK,cAAc;AAAA,QACjB;AAAA,QACA,KAAK,gBAAgB,KAAK,IAAI;AAAA,MAChC;AACA,WAAK,cAAc;AAAA,QACjB;AAAA,QACA,KAAK,gBAAgB,KAAK,IAAI;AAAA,MAChC;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,OAAO;AAErB,UAAM,SAAS,MAAM,UAAU,CAAC;AAGhC,UAAM,EAAE,OAAO,QAAQ,IAAI;AAG3B,SAAK,cAAc,OAAO,OAAO;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,OAAO,SAAS;AAC5B,SAAK,kBAAkB,KAAK,kBAAkB,MAAM;AAClD,aAAO,GAAG,KAAK,IAAI,eAAe,EAAE,KAAK,MAAM;AAC7C,mBAAW,MAAM;AACf,cAAI,OAAO,GAAG,OAAO,QAAQ,MAAM,OAAO,cAAc,KAAK,GAAG;AAC9D,mBAAO,GAAG,IAAI,mBAAmB,EAAE,KAAK,MAAM;AAC5C,kBAAI,OAAO;AACT,uBAAO,GAAG,MAAM,KAAK;AAAA,cACvB;AAEA,qBAAO,gBAAgB,SAAS,MAAM,YAAY,yBAAyB;AAAA,YAC7E,CAAC;AAAA,UACH,OAAO;AACL,gBAAI,OAAO;AACT,qBAAO,GAAG,MAAM,KAAK;AAAA,YACvB;AAEA,gBAAI,SAAS;AACX,mBAAK,kBAAkB,aAAa,EAAE,mBAAmB,EAAE,gBAAgB,OAAO;AAClF,mBAAK,kBAAkB,aAAa,EAAE,mBAAmB,EAAE,kBAAkB;AAC7E,mBAAK,kBAAkB,aAAa,EAAE,mBAAmB,EAAE,OAAO;AAAA,YACpE;AAEA,mBAAO,gBAAgB,SAAS,MAAM,YAAY,yBAAyB;AAAA,UAC7E;AAAA,QACF,GAAG,GAAG;AAAA,MACR,CAAC;AAAA,IACH,CAAC;AAED,WAAO,GAAG,IAAI,gBAAgB;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,OAAO,SAAS;AAC5B,WAAO,gBAAgB,SAAS,MAAM,SAAS,yBAAyB;AACxE,WAAO,GAAG,IAAI,sBAAsB,EAAE,KAAK,MAAM;AAC/C,WAAK,cAAc,OAAO,OAAO;AAAA,IACnC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU,WAAW,MAAM;AACzB,QAAI,KAAK,eAAe;AACtB,YAAM,QAAQ,IAAI,YAAY,WAAW;AAAA,QACvC,QAAQ;AAAA,MACV,CAAC;AAED,WAAK,cAAc,cAAc,KAAK;AAAA,IACxC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa;AACX,SAAK,yBAAyB;AAAA,EAChC;AACF;AAGA,IAAO,uBAAQ;AAAA,EACb,MAAM,CAAC,cAAc,IAAI,aAAa,EAAE,KAAK,SAAS;AACxD;;;ACpPA,OAAO,iBAAiB,kBAAkB,MAAM;AAE9C,uBAAa,KAAK,OAAO,SAAS;AACpC,CAAC;",
  "names": []
}
