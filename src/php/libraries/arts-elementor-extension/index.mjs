/*!
 * Arts Elementor Extension v1.0.4
 * https://artemsemkin.com
 * https://github.com/artkrsk/arts-elementor-extension
 * Â© 2025 Artem Semkin
 * License: MIT
 */
var r=(o,e)=>{let t;return function(...n){clearTimeout(t),t=window.setTimeout(()=>o.apply(this,n),e)}};var s=class{constructor(){this.elementorInstance=null,this.previewWindow=null,this.resizeObserver=null,this.debouncedResizeEmit=null}init(e){return this.elementorInstance=e,this.elementorInstance.once("preview:loaded",()=>{this.setWindow(),this.addSettingsChangeCallbacks(),this.addReloadPreviewListener()}),{updatePreview:this.updatePreview.bind(this),reloadPreview:this.reloadPreview.bind(this),emitEvent:this.emitEvent.bind(this),disconnect:this.disconnect.bind(this)}}setWindow(){this.previewWindow=this.elementorInstance.$preview.get(0).contentWindow,this.initResizeObserver()}initResizeObserver(){this.previewWindow&&(this.debouncedResizeEmit=r(e=>{let t=e[0];if(t){let{width:i,height:n}=t.contentRect;this.emitEvent("arts/elementor_extension/editor/preview_resized",{width:i,height:n,contentRect:t.contentRect})}},250),this.resizeObserver=new ResizeObserver(this.debouncedResizeEmit),this.previewWindow.document&&this.previewWindow.document.body&&this.resizeObserver.observe(this.previewWindow.document.body))}disconnectResizeObserver(){this.resizeObserver&&(this.resizeObserver.disconnect(),this.resizeObserver=null),this.debouncedResizeEmit=null}addSettingsChangeCallbacks(){let{addChangeCallback:e}=this.elementorInstance.settings.page;(window.artsElementorExtensionEditorLiveSettings||[]).forEach(i=>e(i,n=>this.onSettingChange(i,n)))}onSettingChange(e,t){let i=this.elementorInstance.settings.page.model.attributes;this.emitEvent("arts/elementor_extension/editor/setting_changed",{settings:i,setting:e,value:t})}addReloadPreviewListener(){this.previewWindow&&(this.previewWindow.removeEventListener("arts/elementor_extension/editor/reload_preview",this.onReloadPreview.bind(this)),this.previewWindow.addEventListener("arts/elementor_extension/editor/reload_preview",this.onReloadPreview.bind(this)))}onReloadPreview(e){let t=e.detail||{},{route:i,section:n}=t;this.reloadPreview(i,n)}updatePreview(e,t){this.elementorInstance.once("preview:loaded",()=>{window.$e.data.get("globals/index").then(()=>{setTimeout(()=>{window.$e.routes.current.panel.search("panel/global")>=0?window.$e.run("panel/global/open").then(()=>{e&&window.$e.route(e),window.elementorCommon.elements.$body.removeClass("elementor-panel-loading")}):(e&&window.$e.route(e),t&&(this.elementorInstance.getPanelView().getCurrentPageView().activateSection(t),this.elementorInstance.getPanelView().getCurrentPageView().openActiveSection(),this.elementorInstance.getPanelView().getCurrentPageView().render()),window.elementorCommon.elements.$body.removeClass("elementor-panel-loading"))},500)})}),window.$e.run("preview/reload")}reloadPreview(e,t){window.elementorCommon.elements.$body.addClass("elementor-panel-loading"),window.$e.run("document/save/update").then(()=>{this.updatePreview(e,t)})}emitEvent(e,t){if(this.previewWindow){let i=new CustomEvent(e,{detail:t});this.previewWindow.dispatchEvent(i)}}disconnect(){this.disconnectResizeObserver()}},d={init:o=>new s().init(o)};window.addEventListener("elementor/init",()=>{d.init(window.elementor)});
